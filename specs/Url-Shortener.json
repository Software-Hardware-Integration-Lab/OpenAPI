{
    "components": {
        "parameters": {
            "id": {
                "description": "Object ID that uniquely identifies the record.",
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                    "examples": [
                        "b2fd105a-2594-437e-b934-1a62a51c28b4"
                    ],
                    "type": "string",
                    "format": "uuid",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                }
            }
        },
        "responses": {
            "204": {
                "description": "Request is successful!"
            },
            "400": {
                "description": "Invalid input!"
            },
            "404": {
                "description": "The requested object was not found."
            },
            "500": {
                "description": "Internal Server Error"
            }
        },
        "schemas": {
            "Auth.Id": {
                "title": "Auth IDs required to authenticate",
                "description": "Object containing IDs necessary to perform user authentication in the EntraID.",
                "examples": [
                    {
                        "appId": "2a7e1b3c-4d5f-4a8b-9e6a-1c2b7f3d8e4a",
                        "tenantId": "9c1e7a2b-5d3f-4a8b-2c6e-7f1a3d9e8b5c"
                    }
                ],
                "properties": {
                    "appId": {
                        "description": "Application ID that should be used in Access Tokens as the audience and the endpoint necessary for auth code flows.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$",
                        "readOnly": true
                    },
                    "tenantId": {
                        "description": "Tenant ID necessary for authority host URL configuration and UI customization.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$",
                        "readOnly": true
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "tenantId"
                ]
            },
            "Core.HealthReport": {
                "title": "Core System - Health Report",
                "description": "Health report that indicates if a service is down or not that the URL Shortener relies on.",
                "examples": [
                    {
                        "authClient": true,
                        "authServer": true,
                        "database": false
                    }
                ],
                "properties": {
                    "authClient": {
                        "description": "Flag that indicates if the client side authentication validation is working or not.",
                        "type": "boolean"
                    },
                    "authServer": {
                        "description": "Flag that indicates if the server side authentication is working or not.",
                        "type": "boolean"
                    },
                    "database": {
                        "description": "Flag that indicates if the ORM (Database) system is down (`false`) or not (`true`). False indicate the service is not working, true indicates the service is working.",
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "authClient",
                    "authServer",
                    "database"
                ]
            },
            "Redirect.UrlConfiguration": {
                "title": "Redirect - Configuration Record",
                "description": "Object representing table entity with all available metadata.",
                "examples": [
                    {
                        "id": "7e2b1c8a-4f3d-4e2a-9b1a-2c6e8d7f1a23",
                        "sourceUrl": "https://www.example.com/vanityUrl",
                        "createdBy": "3c5a9b7e-2d4f-4c1b-8e6a-7f2b3d1c9e45",
                        "customUserAgentMatcher": null,
                        "expectedBrokenScanStatusCode": null,
                        "domainConfigId": "9a1e7b2c-5d3f-4a8b-9c2e-6f1a3d7e8b54",
                        "enabled": true,
                        "enableLinkBrokenScan": false,
                        "updatedBy": "3c5a9b7e-2d4f-4c1b-8e6a-7f2b3d1c9e45",
                        "targetUrl": "https://www.example.com/very-long-and-complex-url-with_plenty-of-special-characters-and-non-repeated-words",
                        "notEnabledAfter": "2025-12-31T23:59:59Z",
                        "notEnabledBefore": null,
                        "targetUrlCustom": null,
                        "targetUrlMobile": null,
                        "targetUrlNodeJs": null,
                        "targetUrlPowershell": null,
                        "targetUrlPython": null,
                        "type": "temporary"
                    }
                ],
                "properties": {
                    "id": {
                        "description": "Object ID that uniquely identifies this record and can be used as a reference in any other table.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$",
                        "readOnly": true
                    },
                    "sourceUrl": {
                        "description": "The codified version of the full URL that a user would be navigating to. It has to be unique in the table as it will be used during lookup.",
                        "type": "string",
                        "format": "uri"
                    },
                    "createdBy": {
                        "description": "Object ID of the user who initially creates this record.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$",
                        "readOnly": true
                    },
                    "customUserAgentMatcher": {
                        "description": "Custom user agent matcher to be used with the custom target url. Custom target url is non-operable if this is not set. String max char count is 512.",
                        "type": [
                            "string",
                            "null"
                        ],
                        "maxLength": 512
                    },
                    "expectedBrokenScanStatusCode": {
                        "description": "Status code expected by the scheduled scan results.",
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "domainConfigId": {
                        "description": "Object ID of the domain configuration that this redirect record is associated with.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$",
                        "readOnly": true
                    },
                    "enabled": {
                        "description": " Flag that indicates if the created URL is enabled (`true`) or not (`false`).",
                        "type": "boolean"
                    },
                    "enableLinkBrokenScan": {
                        "description": "Flag that enables (`true`) or disables (`false`) scans happening against the target to check if broken.",
                        "type": "boolean"
                    },
                    "updatedBy": {
                        "description": "Object ID of the last user who updated this record.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                    },
                    "targetUrl": {
                        "description": "Destination that the client will be redirected to if the source is matched. This is the default URL that will be used when no user agent is matched.",
                        "type": "string",
                        "format": "uri"
                    },
                    "notEnabledAfter": {
                        "description": "Date that when present, indicates when the link expires.",
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "notEnabledBefore": {
                        "description": "Date that when present, indicates when the link goes live.",
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "targetUrlCustom": {
                        "description": "Target URL for custom defined and matching user agent clients.",
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri"
                    },
                    "targetUrlMobile": {
                        "description": "Target URL for various mobile operating systems.",
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri"
                    },
                    "targetUrlNodeJs": {
                        "description": "Target URL for Node.JS clients.",
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri"
                    },
                    "targetUrlPowershell": {
                        "description": "Target URL for PowerShell clients.",
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri"
                    },
                    "targetUrlPython": {
                        "description": "Target URL for Python clients.",
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri"
                    },
                    "type": {
                        "description": "Type of the redirect. Used to calculate the status code to be sent to the caller.",
                        "type": "string",
                        "enum": [
                            "temporary",
                            "permanent"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "sourceUrl",
                    "createdBy",
                    "customUserAgentMatcher",
                    "expectedBrokenScanStatusCode",
                    "domainConfigId",
                    "enabled",
                    "enableLinkBrokenScan",
                    "updatedBy",
                    "targetUrl",
                    "notEnabledAfter",
                    "notEnabledBefore",
                    "targetUrlCustom",
                    "targetUrlMobile",
                    "targetUrlNodeJs",
                    "targetUrlPowershell",
                    "targetUrlPython",
                    "type"
                ]
            },
            "Redirect.BannedTerm": {
                "title": "Redirect - Banned Term Record",
                "description": "Object representing a banned term that cannot be used in the vanity URLs.",
                "examples": [
                    {
                        "id": "d4f5e6a7-b8c9-4d0e-9f1a-2b3c4d5e6f70",
                        "name": "admin",
                        "type": "rootSegment"
                    }
                ],
                "properties": {
                    "id": {
                        "description": "Unique value that identifies this record and will be used as a reference in any other table.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$",
                        "readOnly": true
                    },
                    "name": {
                        "description": "Term or component that is banned in any of the vanity URLs that users can create.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Specifies how the name ban operates: `rootSegment` operates matches like `https://example.com/<term>/*`, `global` operates matches like `https://example.com/*<term>*`.",
                        "type": "string",
                        "enum": [
                            "rootSegment",
                            "global"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "type"
                ]
            },
            "Redirect.DomainName": {
                "title": "Redirect - Domain Name Record",
                "description": "Object representing a domain name entry that will serve as a base for vanity URLs.",
                "examples": [
                    {
                        "id": "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d",
                        "allowHttp": false,
                        "count": 1,
                        "hidden": false,
                        "hostName": "example.com",
                        "type": "vanity"
                    }
                ],
                "properties": {
                    "id": {
                        "description": "Unique value that identifies this record and will be used as a reference in any other table.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$",
                        "readOnly": true
                    },
                    "allowHttp": {
                        "description": "Flag that indicates if the domain accepts unencrypted traffic (`true`) or not (`false`).",
                        "type": "boolean"
                    },
                    "count": {
                        "description": "Current increment for the id number if the domain is in ID number mode. Always incremented even if not in ID mode so as to be able to swap to ID mode if requested with no risk for collision.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0,
                        "readOnly": true
                    },
                    "hidden": {
                        "description": "Flag that indicates if the domain name is hidden from the user interface. The domain will always be visible on the domain name admin config page. This flag is useful for hiding names that are behind load balancers from end users to reduce confusion. Can also be used to `enable` or `disable` end user interaction in the UI with the specified names.",
                        "type": "boolean"
                    },
                    "hostName": {
                        "description": "String to be used in matching the host name. Subdomains need to have their own record to be usable.",
                        "type": "string",
                        "format": "hostname"
                    },
                    "type": {
                        "description": "Flag that indicates the type of shortened URL that can be generated on the domain: `vanity` allows any user structure as long as it is unique. Example: `https://example.com/myUrl`, `idNumber` locks out user control of the vanity URL and hard codes it to an ID number. Example: `https://example.com/managedLink?id=123`.",
                        "type": "string",
                        "enum": [
                            "vanity",
                            "idNumber"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "allowHttp",
                    "count",
                    "hidden",
                    "hostName",
                    "type"
                ]
            },
            "Redirect.RbacAssignment": {
                "title": "Redirect - RBAC Assignment Record",
                "description": "Object representing an RBAC assignment entry to control user's AuthZ abilities when dealing with redirects/domains/banned terms records.",
                "examples": [
                    {
                        "id": "2e1c4b7a-8d3f-4e2b-9a1c-7f5d2b3e6a9c",
                        "assignmentTargetType": "RedirectConfig",
                        "createdAt": "2025-08-20T12:00:00Z",
                        "targetId": "5a7e2c1b-3d4f-4a8b-9e6a-2c1b7f3d8e4a",
                        "principalId": "9b2e7a1c-4d3f-5a8b-2c6e-1a7f3d9e8b5c",
                        "principalType": "user",
                        "role": "b8e2c7a1-4d3f-4a9b-8e6a-2c1b7f3d8e4a"
                    }
                ],
                "properties": {
                    "id": {
                        "description": "Unique value that identifies this record and will be used as a reference in any other table.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$",
                        "readOnly": true
                    },
                    "assignmentTargetType": {
                        "description": "Type of object that this RBAC assignment is for.",
                        "type": "string",
                        "enum": [
                            "RedirectConfig",
                            "DomainName",
                            "BannedName"
                        ]
                    },
                    "createdAt": {
                        "description": "Time stamp of when the assignment was created.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "targetId": {
                        "description": "Unique ID of the system that this assignment describes.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                    },
                    "principalId": {
                        "description": "Object ID of the principal that this assignment targets.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                    },
                    "principalType": {
                        "description": "Flag used to optimize principal processing.",
                        "type": "string",
                        "enum": [
                            "user",
                            "group"
                        ]
                    },
                    "role": {
                        "description": "Role ID of the role that is assigned by this assignment.",
                        "type": "string",
                        "format": "uuid",
                        "maxLength": 36,
                        "minLength": 36,
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "assignmentTargetType",
                    "createdAt",
                    "targetId",
                    "principalId",
                    "principalType",
                    "role"
                ]
            }
        },
        "securitySchemes": {
            "EntraID": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "The Access Token from Entra ID for the `URL Shortener` Enterprise App (may need to be created from the App Registration)."
            }
        }
    },
    "externalDocs": {
        "description": "Official Documentation",
        "url": "https://docs.shilab.com"
    },
    "info": {
        "contact": {
            "email": "elliot_huffman@shi.com",
            "name": "SHI - Lab"
        },
        "description": "Create vanity or numeric short version of your desired URL. Share it digitally, as QR code, or print it.",
        "title": "SHI URL Shortener",
        "version": "0.0.3"
    },
    "openapi": "3.1.1",
    "paths": {
        "/Api/Auth/Id": {
            "get": {
                "summary": "Retrieves the IDs required to authenticate.",
                "description": "Provides the Tenant ID and the Application ID of the service principal that access tokens need to be issued against. This is also useful for configuring public clients to be able to authenticate to for auth code flows.",
                "operationId": "/Api/Auth/Id/Get",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Auth.Id"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "tags": [
                    "Core"
                ],
                "security": []
            }
        },
        "/Api/Core/Health": {
            "get": {
                "summary": "Health of the Service for Probing",
                "description": "Check the health of the various components of the URL Shortener and report back. Useful for automated health probing.",
                "operationId": "/Api/Core/Health/Get",
                "responses": {
                    "204": {
                        "description": "Service is operational!"
                    },
                    "500": {
                        "description": "Service has a failure described with following report.",
                        "content": {
                            "application/json": {
                                "examples": {
                                    "All services operational": {
                                        "description": "Health check report shows all services as available and working.",
                                        "value": {
                                            "authClient": true,
                                            "authServer": true,
                                            "database": true
                                        }
                                    },
                                    "Database service down": {
                                        "description": "Health check report shows that the database service is down.",
                                        "value": {
                                            "authClient": true,
                                            "authServer": true,
                                            "database": false
                                        }
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Core.HealthReport"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Core"
                ],
                "security": []
            }
        },
        "/Api/Redirect": {
            "get": {
                "summary": "Retrieves All Redirect Configuration Records",
                "description": "Retrieves all redirect records matching the requested filters, if any.\n\nThis endpoint requires that the principal has an RBAC assignment to view the associated records or have the role `Everything.ReadWrite.All`, or `Redirect.ReadWrite.All` assigned in Entra to view all regardless of RBAC.",
                "operationId": "/Api/Redirect/Get",
                "parameters": [
                    {
                        "name": "sourceUrl",
                        "in": "query",
                        "description": "Filter by the `sourceUrl` field.",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "description": "Filter by the `createdBy` field.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                        }
                    },
                    {
                        "name": "customUserAgentMatcher",
                        "in": "query",
                        "description": "Filter by the `customUserAgentMatcher` field.",
                        "schema": {
                            "type": "string",
                            "maxLength": 512
                        }
                    },
                    {
                        "name": "domainConfigId",
                        "in": "query",
                        "description": "Filter by the `domainConfigId` field.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                        }
                    },
                    {
                        "name": "updatedBy",
                        "in": "query",
                        "description": "Filter by the `updatedBy` field.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                        }
                    },
                    {
                        "name": "targetUrl",
                        "in": "query",
                        "description": "Filter by the `targetUrl` field.",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "targetUrlCustom",
                        "in": "query",
                        "description": "Filter by the `targetUrlCustom` field.",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "targetUrlMobile",
                        "in": "query",
                        "description": "Filter by the `targetUrlMobile` field.",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "targetUrlNodeJs",
                        "in": "query",
                        "description": "Filter by the `targetUrlNodeJs` field.",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "targetUrlPowershell",
                        "in": "query",
                        "description": "Filter by the `targetUrlPowershell` field.",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "targetUrlPython",
                        "in": "query",
                        "description": "Filter by the `targetUrlPython` field.",
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by the `type` field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "temporary",
                                "permanent"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Redirect.UrlConfiguration"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "URL Redirect"
                ]
            },
            "post": {
                "summary": "Creates New Redirect Configuration Record",
                "description": "Creates new URL redirect record in the database and returns information enriched with created metadata.\n\nThis endpoint does not have scope (permission) restrictions. Creating principal is set as RBAC owner of the newly created URL.",
                "operationId": "/Api/Redirect/Post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "examples": {
                                "Missing a required field": {
                                    "description": "Payload is missing one or more of the required fields.",
                                    "value": {
                                        "sourceUrl": "https://www.example.com/long-and-complex-url",
                                        "createdBy": "3c5a9b7e-2d4f-4c1b-8e6a-7f2b3d1c9e45",
                                        "customUserAgentMatcher": null,
                                        "domainConfigId": "9a1e7b2c-5d3f-4a8b-9c2e-6f1a3d7e8b54",
                                        "updatedBy": "3c5a9b7e-2d4f-4c1b-8e6a-7f2b3d1c9e45"
                                    }
                                },
                                "Complete and proper payload": {
                                    "description": "Request where all required fields are present and valid.",
                                    "value": {
                                        "id": "7e2b1c8a-4f3d-4e2a-9b1a-2c6e8d7f1a23",
                                        "sourceUrl": "https://www.example.com/long-and-complex-url",
                                        "createdBy": "3c5a9b7e-2d4f-4c1b-8e6a-7f2b3d1c9e45",
                                        "customUserAgentMatcher": null,
                                        "expectedBrokenScanStatusCode": null,
                                        "domainConfigId": "9a1e7b2c-5d3f-4a8b-9c2e-6f1a3d7e8b54",
                                        "enabled": true,
                                        "enableLinkBrokenScan": false,
                                        "updatedBy": "3c5a9b7e-2d4f-4c1b-8e6a-7f2b3d1c9e45",
                                        "targetUrl": "https://www.example.com/target",
                                        "notEnabledAfter": null,
                                        "notEnabledBefore": null,
                                        "targetUrlCustom": null,
                                        "targetUrlMobile": null,
                                        "targetUrlNodeJs": null,
                                        "targetUrlPowershell": null,
                                        "targetUrlPython": null,
                                        "type": "temporary"
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Redirect.UrlConfiguration"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.UrlConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "URL Redirect"
                ]
            }
        },
        "/Api/Redirect/Check": {
            "post": {
                "summary": "Checks if Target Name is Available",
                "description": "Validates if provided target name is available to be requested. Returns boolean `true` if the name is available, `false` if the name is already recorded.\n\nThis endpoint does not have scope (permission) restrictions.",
                "operationId": "/Api/Redirect/Check/Post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "examples": {
                                "Required field is missing": {
                                    "description": "Payload is missing the required 'sourceName' field.",
                                    "value": {}
                                },
                                "Complete and accurate request": {
                                    "description": "Payload includes all required and valid entries.",
                                    "value": {
                                        "sourceName": "my-vanity-url"
                                    }
                                }
                            },
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sourceName": {
                                        "description": "URL to check if is taken or not.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "sourceName"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "URL Redirect"
                ]
            }
        },
        "/Api/Redirect/{id}": {
            "get": {
                "summary": "Retrieves Specific Redirect Configuration Record",
                "description": "Retrieves all information from the database of the redirect record.\n\nTo view the specific record, the principal has to be a part of an RBAC assignment or one of the following Entra roles: `Everything.ReadWrite.All`, or `Redirect.ReadWrite.All`.",
                "operationId": "/Api/Redirect/:id/Get",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.UrlConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "URL Redirect"
                ]
            },
            "patch": {
                "summary": "Updates Specific Redirect Configuration Record",
                "description": "Updates one or more properties of the redirect record based on which fields are provided.\n\nThis endpoint requires either of the following RBAC assignments: `Owner` or `Contributor` on the specific record, or have the role `Everything.ReadWrite.All`, or `Redirect.ReadWrite.All` assigned in Entra to update regardless of RBAC.",
                "operationId": "/Api/Redirect/:id/Patch",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "Sample request to update record": {
                                    "description": "Payload contains one or more fields that need update in the database.",
                                    "value": {
                                        "targetUrl": "https://www.example.com/target-updated",
                                        "targetUrlNodeJs": "https://www.example.com/target-nodejs",
                                        "type": "permanent"
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Redirect.UrlConfiguration"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.UrlConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "URL Redirect"
                ]
            },
            "delete": {
                "summary": "Removes Specific Redirect Configuration Record",
                "description": "Deletes the redirect record from the database.\n\nThis endpoint requires an RBAC assignment of `Owner` or `Contributor` on the specific record, or the `Everything.ReadWrite.All`, or `Redirect.ReadWrite.All` scope (permission) regardless of permissions.",
                "operationId": "/Api/Redirect/:id/Delete",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "URL Redirect"
                ]
            }
        },
        "/Api/BannedName": {
            "get": {
                "summary": "Retrieves All Banned Name Records",
                "description": "Retrieves all records of the banned terms that are not allowed to be used as targets.\n\nThis endpoint does not have implicit scope (permission) restrictions but includes an internal check on user's RBAC assignments to be able to view bans.",
                "operationId": "/Api/BannedName/Get",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by the `name` field.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by the `type` field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "rootSegment",
                                "global"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Redirect.BannedTerm"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "Banned Name"
                ]
            },
            "post": {
                "summary": "Creates New Banned Name Record",
                "description": "Create new record of the banned term.\n\nThis endpoint requires the `BanList.ReadWrite.All` or `Everything.ReadWrite.All` scope (permission).",
                "operationId": "/Api/BannedName/Post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "examples": {
                                "Missing a required field": {
                                    "description": "Payload is missing one or more of the required fields.",
                                    "value": {
                                        "name": "admin"
                                    }
                                },
                                "Complete and proper payload": {
                                    "description": "Request where all required fields are present and valid.",
                                    "value": {
                                        "name": "admin",
                                        "type": "rootSegment"
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Redirect.BannedTerm"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.BannedTerm"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "Banned Name"
                ]
            }
        },
        "/Api/BannedName/{id}": {
            "get": {
                "summary": "Retrieves Specific Banned Name Record",
                "description": "Retrieves all information from the database of the banned name record.\n\nThis endpoint does not have implicit scope (permission) restrictions but includes an internal check on user's RBAC assignments to view the specific ban.",
                "operationId": "/Api/BannedName/:id/Get",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.BannedTerm"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "Banned Name"
                ]
            },
            "delete": {
                "summary": "Removes Specific Banned Name Record",
                "description": "Deletes the banned name record from the database.\n\nThis endpoint requires an RBAC assignment and the `BanList.ReadWrite.All` or `Everything.ReadWrite.All` scope (permission).",
                "operationId": "/Api/BannedName/:id/Delete",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "Banned Name"
                ]
            }
        },
        "/Api/Domain": {
            "get": {
                "summary": "Retrieves All Domain Name Records",
                "description": "Retrieves all domain name records from the database.\n\nThis endpoint does not have implicit scope (permission) restrictions but includes an internal check on user's RBAC assignments.",
                "operationId": "/Api/Domain/Get",
                "parameters": [
                    {
                        "name": "allowHttp",
                        "in": "query",
                        "description": "Filter by the `allowHttp` field.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Filter by the `count` field.",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "hidden",
                        "in": "query",
                        "description": "Filter by the `hidden` field.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "hostName",
                        "in": "query",
                        "description": "Filter by the `hostName` field.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by the `type` field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "vanity",
                                "idNumber"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Redirect.DomainName"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "Domain Configuration"
                ]
            },
            "post": {
                "summary": "Creates New Domain Name Record",
                "description": "Creates new domain name record in the database and returns information enriched with created metadata.\n\nThis endpoint requires the `Domain.ReadWrite.All` or `Everything.ReadWrite.All` scope (permission).",
                "operationId": "/Api/Domain/Post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "examples": {
                                "Missing a required field": {
                                    "description": "Payload is missing one or more of the required fields.",
                                    "value": {
                                        "allowHttp": true,
                                        "hostName": "example.com"
                                    }
                                },
                                "Complete and proper payload": {
                                    "description": "Request where all required fields are present and valid.",
                                    "value": {
                                        "allowHttp": false,
                                        "count": 1,
                                        "hidden": false,
                                        "hostName": "example.com",
                                        "type": "vanity"
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Redirect.DomainName"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.DomainName"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "Domain Configuration"
                ]
            }
        },
        "/Api/Domain/{id}": {
            "get": {
                "summary": "Retrieves Specific Domain Name Record",
                "description": "Retrieves all information from the database of the domain name record.\n\nThis endpoint does not have implicit scope (permission) restrictions but includes an internal check on user's RBAC assignments.",
                "operationId": "/Api/Domain/:id/Get",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.DomainName"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "Domain Configuration"
                ]
            },
            "patch": {
                "summary": "Updates Specific Domain Name Record",
                "description": "Updates one or more properties of the domain name record based on which fields are provided.\n\nThis endpoint requires the `Domain.ReadWrite.All` or `Everything.ReadWrite.All` scope (permission).",
                "operationId": "/Api/Domain/:id/Patch",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "Sample request to update record": {
                                    "description": "Payload contains one or more fields that need update in the database.",
                                    "value": {
                                        "allowHttp": false,
                                        "type": "idNumber"
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Redirect.DomainName"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.DomainName"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "Domain Configuration"
                ]
            },
            "delete": {
                "summary": "Removes Specific Domain Name Record",
                "description": "Deletes the domain name record from the database.\n\nThis endpoint requires the `Domain.ReadWrite.All` or `Everything.ReadWrite.All` scope (permission).",
                "operationId": "/Api/Domain/:id/Delete",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "Domain Configuration"
                ]
            }
        },
        "/Api/Rbac": {
            "get": {
                "summary": "Retrieves All RBAC Assignment Records",
                "description": "Retrieves all RBAC assignment records from the database.\n\nThis endpoint does not have implicit scope (permission) restrictions but includes an internal check on user's RBAC assignments.",
                "operationId": "/Api/Rbac/Get",
                "parameters": [
                    {
                        "name": "assignmentTargetType",
                        "in": "query",
                        "description": "Filter by the `assignmentTargetType` field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "RedirectConfig",
                                "DomainName",
                                "BannedName"
                            ]
                        }
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "Filter by the `createdAt` field.",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "targetId",
                        "in": "query",
                        "description": "Filter by the `targetId` field.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                        }
                    },
                    {
                        "name": "principalId",
                        "in": "query",
                        "description": "Filter by the `principalId` field.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                        }
                    },
                    {
                        "name": "principalType",
                        "in": "query",
                        "description": "Filter by the `principalType` field.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "user",
                                "group"
                            ]
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Filter by the `role` field.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "maxLength": 36,
                            "minLength": 36,
                            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Redirect.RbacAssignment"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "RBAC Assignment"
                ]
            },
            "post": {
                "summary": "Creates New RBAC Assignment Record",
                "description": "Create new RBAC assignment record in the database and returns information enriched with created metadata.\n\nThis endpoint does not have implicit scope (permission) restrictions but includes an internal check on user's RBAC assignments.",
                "operationId": "/Api/Rbac/Post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "examples": {
                                "Missing a required field": {
                                    "description": "Payload is missing one or more of the required fields.",
                                    "value": {
                                        "targetId": "6f2a1b7e-3d4c-4a8b-9e6a-2c1b7f3d8e4a",
                                        "principalId": "1a7e2b3c-5d4f-4c8b-9a6e-7f2b3d1c9e45",
                                        "principalType": "user"
                                    }
                                },
                                "Complete and proper payload": {
                                    "description": "Request where all required fields are present and valid.",
                                    "value": {
                                        "assignmentTargetType": "RedirectConfig",
                                        "targetId": "8b2e7a1c-4d3f-5a8b-0c6e-1a7f3d9e8b5c",
                                        "principalId": "c7e1a2b3-4d5f-4a8b-9e6a-2c1b7f3d8e4a",
                                        "principalType": "user",
                                        "role": "9e1c7b2a-5d3f-4a8b-9c2e-6f1a3d7e8b54"
                                    }
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Redirect.RbacAssignment"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.RbacAssignment"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "RBAC Assignment"
                ]
            }
        },
        "/Api/Rbac/{id}": {
            "get": {
                "summary": "Retrieves Specific RBAC Assignment Record",
                "description": "Retrieves all information from the database of the RBAC assignment record.\n\nThis endpoint does not have scope (permission) restrictions.",
                "operationId": "/Api/Rbac/:id/Get",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Redirect.RbacAssignment"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    }
                },
                "tags": [
                    "RBAC Assignment"
                ]
            },
            "delete": {
                "summary": "Removes Specific RBAC Assignment Record",
                "description": "Deletes the RBAC assignment record from the database.\n\nThis endpoint does not have implicit scope (permission) restrictions but includes an internal check on user's RBAC assignments.",
                "operationId": "/Api/Rbac/:id/Delete",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    }
                },
                "tags": [
                    "RBAC Assignment"
                ]
            }
        }
    },
    "security": [
        {
            "EntraID": []
        }
    ],
    "servers": [
        {
            "description": "The service",
            "url": "/"
        }
    ],
    "tags": [
        {
            "description": "Configures the specified web server to support and process the authentication API routes.",
            "name": "Core"
        },
        {
            "description": "Handles the redirection of short URLs to their target destinations, including support for different types of redirects and tracking.",
            "name": "URL Redirect"
        },
        {
            "description": "Manages the list of terms that are prohibited from being used as targets in short URLs to prevent misuse or inappropriate content.",
            "name": "Banned Name"
        },
        {
            "description": "Manages domain names used for generating short URLs, including support for vanity domains and domain-specific settings.",
            "name": "Domain Configuration"
        },
        {
            "description": "Manages role-based access control (RBAC) assignments, allowing for fine-grained permissions and access management for users and groups within the URL shortening service.",
            "name": "RBAC Assignment"
        }
    ]
}
